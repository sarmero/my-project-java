/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.Generator;
import model.Models;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author user
 */
public class ComplementoORM extends javax.swing.JFrame {

    private FileReader fileReader;
    private BufferedReader bufferedReader;
    private Generator generator;
    private String ruta;

    /**
     * Creates new form ComplementoORM
     */
    public ComplementoORM() {
        initComponents();
        generator = new Generator();
        ruta = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaCambios = new javax.swing.JTextArea();
        btrController = new javax.swing.JRadioButton();
        btnIniciar = new javax.swing.JButton();
        btnRuta = new javax.swing.JButton();
        btnDownload = new javax.swing.JButton();
        btrAssociate = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        btnClean = new javax.swing.JButton();
        btrOpcion = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaOpcion = new javax.swing.JTextArea();
        chbIgnore = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Complemento Angular ORM");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(49, 51, 53));

        txaCambios.setEditable(false);
        txaCambios.setBackground(new java.awt.Color(59, 81, 77));
        txaCambios.setColumns(20);
        txaCambios.setForeground(new java.awt.Color(102, 255, 102));
        txaCambios.setRows(5);
        jScrollPane1.setViewportView(txaCambios);

        btrController.setForeground(new java.awt.Color(102, 255, 102));
        btrController.setText("Crear Archivos en Controller");
        btrController.setEnabled(false);

        btnIniciar.setBackground(new java.awt.Color(102, 255, 102));
        btnIniciar.setForeground(new java.awt.Color(0, 51, 51));
        btnIniciar.setText("Iniciar");
        btnIniciar.setEnabled(false);
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        btnRuta.setBackground(new java.awt.Color(0, 153, 255));
        btnRuta.setForeground(new java.awt.Color(255, 255, 255));
        btnRuta.setText("Abrir projecto");
        btnRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRutaActionPerformed(evt);
            }
        });

        btnDownload.setBackground(new java.awt.Color(255, 102, 51));
        btnDownload.setForeground(new java.awt.Color(255, 255, 255));
        btnDownload.setText("Cargar modelos");
        btnDownload.setEnabled(false);
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        btrAssociate.setForeground(new java.awt.Color(102, 255, 102));
        btrAssociate.setText("Crear Asociaciones entre modelos");
        btrAssociate.setEnabled(false);

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Acciones");

        btnClean.setBackground(new java.awt.Color(204, 204, 255));
        btnClean.setForeground(new java.awt.Color(51, 51, 51));
        btnClean.setText("Limpiar todo");
        btnClean.setEnabled(false);
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        btrOpcion.setForeground(new java.awt.Color(102, 255, 102));
        btrOpcion.setText("Adicionar en Opciones de modelo");
        btrOpcion.setEnabled(false);
        btrOpcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btrOpcionActionPerformed(evt);
            }
        });

        txaOpcion.setEditable(false);
        txaOpcion.setBackground(new java.awt.Color(59, 81, 77));
        txaOpcion.setColumns(20);
        txaOpcion.setForeground(new java.awt.Color(102, 255, 102));
        txaOpcion.setRows(5);
        txaOpcion.setText("   timestamps: false,\n   underscored: true,\n    freezeTableName: true,\n    schema: 'public'");
        jScrollPane3.setViewportView(txaOpcion);

        chbIgnore.setForeground(new java.awt.Color(102, 255, 102));
        chbIgnore.setSelected(true);
        chbIgnore.setText("Ignorar \"primary_key\" en CRUD");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chbIgnore, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(btrOpcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btrController, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btrAssociate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRuta)
                            .addComponent(btnDownload))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chbIgnore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btrAssociate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btrController)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btrOpcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnIniciar)
                            .addComponent(btnClean))
                        .addGap(42, 42, 42))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if (existFolder() == true) {
            init();
        }
    }//GEN-LAST:event_btnIniciarActionPerformed


    private void btnRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRutaActionPerformed
        String rut = openFolderProject();
        if (!"".equals(rut)) {
            txaCambios.setText("");
            txaOpcion.setText("");
            txaCambios.append("Ruta del projecto: " + rut + "\n\n");
            ruta = rut;
            btnDownload.setEnabled(true);
            btnClean.setEnabled(true);
        } else {
            txaCambios.setText("");
            btnIniciar.setEnabled(false);
            btrAssociate.setEnabled(false);
            btrController.setEnabled(false);
            txaOpcion.setEditable(false);
            btnDownload.setEnabled(false);
            btnClean.setEnabled(false);
            btrOpcion.setEnabled(false);
        }
    }//GEN-LAST:event_btnRutaActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        if (verifyFolder(ruta + "\\models") == true) {
            btnIniciar.setEnabled(true);
            btrAssociate.setEnabled(true);
            btrController.setEnabled(true);
            btrOpcion.setEnabled(true);
            btnDownload.setEnabled(false);
            btnRuta.setEnabled(false);
            ObtainModels();
        } else {
            JOptionPane.showMessageDialog(null,
                    "la carpeta \" models\" no existe ",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        btnIniciar.setEnabled(false);
        btrAssociate.setEnabled(false);
        btrController.setEnabled(false);
        btrOpcion.setEnabled(false);
        btnDownload.setEnabled(false);
        btnClean.setEnabled(false);
        txaCambios.setText("");
        txaOpcion.setText("");
        txaOpcion.setEditable(false);
        btnRuta.setEnabled(true);
        txaOpcion.setText("");
        btrOpcion.setEnabled(false);
        generator = new Generator();
        ruta = "";
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btrOpcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btrOpcionActionPerformed
        if (btrOpcion.isSelected() == true) {
            txaOpcion.setEditable(true);
        } else {
            txaOpcion.setEditable(false);
        }
    }//GEN-LAST:event_btrOpcionActionPerformed

    public String openFolderProject() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.CUSTOM_DIALOG);
        fileChooser.setDialogTitle("Selecionar projecto");
        //fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // Configura para seleccionar solo carpetas

        int result = fileChooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFolder = fileChooser.getSelectedFile();
            String folderPath = selectedFolder.getAbsolutePath();
            System.out.println("Ruta de la carpeta seleccionada: " + folderPath);
            return folderPath;
        } else {
            System.out.println("No se seleccionó ninguna carpeta.");
            return "";
        }
    }

    public boolean verifyFolder(String ruta) {
        File folder = new File(ruta);

        if (folder.exists() && folder.isDirectory()) {
            return true;
        } else {
            return false;
        }
    }

    private void ObtainModels() {
        openFileAll();
        Models models;
        txaCambios.append("****** Model ******** \n");

        for (int i = 0; i < generator.getFileList().size(); i++) {
            models = models(generator.getFileList().get(i));

            txaCambios.append("Nombre: " + models.getName() + " -  Atribute:" + models.getAttributes().size() + "\n");

            for (int j = 0; j < models.getAttributes().size(); j++) {
                if (models.getAttributes().get(j)[1].equals("")) {
                    txaCambios.append("   " + models.getAttributes().get(j)[0] + "\n");
                } else {
                    txaCambios.append("   " + models.getAttributes().get(j)[0] + "     FK: " + models.getAttributes().get(j)[1] + "\n");
                }
            }

            txaCambios.append("------------------------------------------------------- \n");

            generator.addModels(models);
        }

        txaCambios.append("**************************************************\n\n");

    }

    private void init() {
        if (btrOpcion.isSelected() == true) {
            if (!txaOpcion.getText().equals("")) {
                generator.addOpciones(txaOpcion.getText());
                txaCambios.append("Opciones agregadas con exito!!\n");
                txaCambios.append("**************************************************\n\n");
            }
        }

        if (btrAssociate.isSelected() == true) {
            generator.addHasMany();
            generator.createModels();
            txaCambios.append("Asociacion creada con exito!!\n");
            txaCambios.append("**************************************************\n\n");
        }

        if (btrController.isSelected() == true) {
            generator.creteController(ruta + "\\");
            generator.createRoutes(ruta + "\\");
            generator.addLine(ruta + "\\");
            txaCambios.append("Archivos creado en la carpeta controllers con exito!!\n");
            txaCambios.append("**************************************************\n\n");
        }

    }

    private void openFileAll() {
        File folder = new File(ruta + "\\models");

        txaCambios.append("************ Folder ************\n");
        txaCambios.append("Ruta: " + ruta + "\\models\n");

        if (folder.exists() && folder.isDirectory()) {
            File[] files = folder.listFiles();

            if (files != null) {
                for (File file : files) {
                    if (file.isFile()) {
                        if (!"".equals(file.getName())) {
                            if (!file.getName().equals("index.js")) {
                                generator.addFileList(file.getName());
                                txaCambios.append(file.getName() + "\n");
                            }
                        }
                    }
                }
            } else {
                System.out.println("La carpeta está vacía.");
            }
        } else {
            System.out.println("La carpeta no existe o no es una carpeta válida.");
        }

        txaCambios.append("**************************************************\n\n");
    }

    private Models models(String fil) {
        Models models = new Models();
        String rutaFile = ruta + "\\models\\" + fil;
        //System.out.println("ruta file: " + rutaFile);

        File file = new File(rutaFile);
        if (file.exists() && rutaFile.endsWith(".js")) {

            try {
                fileReader = new FileReader(file);
                bufferedReader = new BufferedReader(fileReader);

                String line;
                String model = "";

                while ((line = bufferedReader.readLine()) != null) {
                    model = model + "\n" + line;
                }

                bufferedReader.close();

                models = ObtainModels(model);
                models.setName(fil.replace(".js", ""));
                models.setRuta(rutaFile);
                models.setContent(model);

                //System.out.println("Archivo abierto y renombrado a .txt exitosamente.");
            } catch (IOException e) {
                System.err.println("Error al leer el archivo: " + e.getMessage());
            }

        } else {
            System.out.println("El archivo no tiene la extensión .js");
        }

        return models;
    }

    private Models ObtainModels(String model) {
        Models models = new Models();
        ArrayList<String[]> attributes = new ArrayList();
        String subText = model;
        String nameModel;
        int x, y, z;

        x = subText.indexOf("const attributes = {") + 21;
        y = subText.indexOf("};");

        subText = "},\n" + model.substring(x, y);

        //txaCambios.setText(subText);
        int r, s;
        String res, pk;
        String[] att;
        boolean ban = true;

        while (x > -1 && y > -1) {

            x = subText.indexOf("},");
            y = subText.indexOf(": {");
            //System.out.println("x: " + x + " y: " + y);

            if (x > -1 && y > -1) {

                if (x < y) {
                    att = new String[2];
                    att[0] = subText.substring(x + 3, y).replaceAll(" ", "").replaceAll("\n", "");
                    att[1] = "";

                    if (chbIgnore.isSelected() == true) {
                        if (ban == true) {
                            pk = subText.substring(y);
                            s = pk.indexOf("},");
                            if (s > -1 && s > y) {
                                pk = pk.substring(y, s + 2);
                                s = pk.indexOf("autoIncrement: true");
                                if (s > 0) {
                                    att[1] = "xxxyyyzzz";
                                    ban = false;
                                }
                            } else if (s < 0 && y > -1) {
                                pk = subText.substring(y);
                                s = pk.indexOf("autoIncrement: true");
                                if (s > 0) {
                                    att[1] = "xxxyyyzzz";
                                    ban = false;
                                }
                            }
                        }
                    }

                    attributes.add(att);

                    subText = subText.substring(y + 1);
                } else {

                    res = subText.substring(y);
                    r = res.indexOf("model: \"") + 8;
                    y = res.indexOf("\"\n" + "      }");

                    subText = subText.substring(x);
                    int pos = attributes.size() - 1;
                    att = attributes.get(pos);
                    att[1] = res.substring(r, y);
                    attributes.set(pos, att);
                }

            } else if (x < 0 && y > -1) {

                res = subText.substring(y);
                r = res.indexOf("model: \"") + 8;
                y = res.indexOf("\"\n" + "      }");

                int pos = attributes.size() - 1;
                att = attributes.get(pos);
                att[1] = res.substring(r, y);
                attributes.set(pos, att);
            }
        }

        for (int i = 0; i < attributes.size(); i++) {
            if (attributes.get(i)[1].equals("xxxyyyzzz")) {
                attributes.remove(i);
                i--;
            }
        }

        subText = model;
        z = subText.indexOf("const options") + 5;
        subText = subText.substring(z);

        z = subText.indexOf("const") + 6;
        subText = subText.substring(z);
        y = subText.indexOf(" ");

        nameModel = subText.substring(0, y);

        models.setModels(nameModel);
        models.setAttributes(attributes);

//        for (int i = 0; i < attributes.size(); i++) {
//            System.out.println(i + " att:" + attributes.get(i)[0] + " model: " + attributes.get(i)[1]);
//        }
        return models;
    }

    private boolean existFolder() {
        if (btrController.isSelected() == true) {
            if (verifyFolder(ruta + "\\controllers") == false) {
                JOptionPane.showMessageDialog(null,
                        "la carpeta \" controllers\" no existe ",
                        "Error", JOptionPane.ERROR_MESSAGE);

                return false;
            } else {
                if (verifyFolder(ruta + "\\routes") == false) {
                    JOptionPane.showMessageDialog(null,
                            "la carpeta \" routes\" no existe ",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComplementoORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComplementoORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComplementoORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComplementoORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComplementoORM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnRuta;
    private javax.swing.JRadioButton btrAssociate;
    private javax.swing.JRadioButton btrController;
    private javax.swing.JRadioButton btrOpcion;
    private javax.swing.JCheckBox chbIgnore;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txaCambios;
    private javax.swing.JTextArea txaOpcion;
    // End of variables declaration//GEN-END:variables
}
